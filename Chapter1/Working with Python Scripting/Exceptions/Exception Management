Each time your code executes in an unintended way Python stops your program, and it creates a special kind of data,
called an exception. An exception or runtime error occurs during program execution. Exceptions are errors that Python
detects during execution of the program. If the interpreter experiences an unusual circumstance,
such as attempting to divide a number by 0 or attempting to access a file that does not exist, an exception is created
or thrown, telling the user that there is a problem.
When an exception is not handled correctly, the execution flow is interrupted, and the console shows the information
associated with the exception so that the reader can solve the problem with the information returned by the exception.
Exceptions can be handled so that the program does not terminate.

Python provides effective methods that allow you to observe exceptions, identify them, and handle them efficiently. This
is possible since all potential exceptions have their unambiguous names, so you can categorize them and react
appropriately. We will review some tools in the Development environments for Python scripting section with some
interesting techniques such as debugging.

In Python, we can use a try/except block to resolve situations related to exception handling. Now, the program tries to
run the division by zero. When the error happens, the exceptions manager captures the error and prints a message that is
relevant to the exception

Python 3 defines 63 built-in exceptions, and all of them form a tree-shaped hierarchy. Some of the built-in exceptions
are more general (they include other exceptions), while others are completely concrete. We can say that the closer to
the root an exception is located, the more general (abstract) it is.

Some of the exceptions available by default are listed here (the class from which they are derived
is in parentheses):
-BaseException: The class from which all exceptions inherit.
-Exception (BaseException): An exception is a special case of a more general class named BaseException.
-ZeroDivisionError (ArithmeticError): An exception raised when the second argu- ment of a division is 0. This is a
special case of a more general exception class named ArithmeticError.
-EnvironmentError (StandardError): This is a parent class of errors related to input/ output.
-IOError (EnvironmentError): This is an error in an input/output operation. OSError (EnvironmentError): This is an error
in a system call.
-ImportError (StandardError): The module or the module element that you wanted to import was not found.

All the built-in Python exceptions form a hierarchy of classes. The following script dumps all predefined exception
classes in the form of a tree-like printout.
